{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f VKWave [WIP] [^1] \u0427\u0442\u043e \u044d\u0442\u043e? \u00b6 \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043b\u0435\u0433\u043a\u0438\u0445 \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 VK API. \u041e\u043d \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 asyncio \u0438 \u0442\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u0430\u0445. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f python - 3.7 . \u041d\u0430\u0448 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 - let's chat \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u00b6 VKWave - \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u0430\u044f \u0431\u044b\u0441\u0442\u0440\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0438\u0437-\u0437\u0430 \u043d\u0430\u0448\u0435\u0439 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043b\u0451\u0433\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434 \u0441\u0435\u0431\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u044f\u0432\u043b\u044e\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0447\u0435\u043c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c. \u041d\u043e \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u044b \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c Pull Request-\u044b \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0427\u0430\u0441\u0442\u0438 \u00b6 Client - core part API - use VK's API in the most fancy way Bots - create awesome bots with ease FSM - FSM implementation for VKWave Storage - FSM Storage Bots utils - keyboards, carousels, ... LongPoll - acessing VK's longpoll (user/bot) \u0414\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00b6 \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f VKWave (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432, \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0449\u0435 vkwave.bots.addons.easy ), \u0442\u043e \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a: vkwave-bots-really-easy . \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439: vkwave-<\u0447\u0430\u0441\u0442\u044c-vkwave>-<\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u043e\u0435\u043a\u0442\u0430> .","title":"Overview"},{"location":"#overview","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f VKWave [WIP] [^1]","title":"Overview"},{"location":"#_1","text":"\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043b\u0435\u0433\u043a\u0438\u0445 \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 VK API. \u041e\u043d \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 asyncio \u0438 \u0442\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u0430\u0445. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f python - 3.7 . \u041d\u0430\u0448 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 - let's chat","title":"\u0427\u0442\u043e \u044d\u0442\u043e?"},{"location":"#_2","text":"VKWave - \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u0430\u044f \u0431\u044b\u0441\u0442\u0440\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0438\u0437-\u0437\u0430 \u043d\u0430\u0448\u0435\u0439 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043b\u0451\u0433\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434 \u0441\u0435\u0431\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u044f\u0432\u043b\u044e\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0447\u0435\u043c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c. \u041d\u043e \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u044b \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c Pull Request-\u044b \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"#_3","text":"Client - core part API - use VK's API in the most fancy way Bots - create awesome bots with ease FSM - FSM implementation for VKWave Storage - FSM Storage Bots utils - keyboards, carousels, ... LongPoll - acessing VK's longpoll (user/bot)","title":"\u0427\u0430\u0441\u0442\u0438"},{"location":"#_4","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f VKWave (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432, \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0449\u0435 vkwave.bots.addons.easy ), \u0442\u043e \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a: vkwave-bots-really-easy . \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439: vkwave-<\u0447\u0430\u0441\u0442\u044c-vkwave>-<\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u043e\u0435\u043a\u0442\u0430> .","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"api/","text":"\u041e\u0431\u0437\u043e\u0440 \u00b6 VKWave API \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f VKWave \u0432\u044b \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043d\u0435\u0439 \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u041e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d\u044b, \u0438\u0442\u0434.) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 VK's API \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u00b6 \u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0441\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # our tokens. we got them from VK bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # tokens that are ready for using. bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens ) GetTokenStrategy \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , AnyABCToken , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u0434\u043e\u0441\u0442\u0430\u0451\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e. API \u00b6 \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API from vkwave.client import AIOHTTPClient api = API ( tokens = my_token , clients = AIOHTTPClient ()) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text ) \u041d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d, \u0441\u043b\u0435\u0434\u0443\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0441 \u0442\u0430\u043a\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c: friends = await api . friends . get () result = await api . messages . send ( ... ) \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0434\u0440\u0443\u0437\u044c\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d, \u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u043c. \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b. async with api . sync_token () as sapi : friends = await sapi . friends . get () ... \u0422\u0443\u0442 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c api_session.get_context() \u043d\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442. \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c api_session.with_token \u0438\u043b\u0438 api_session.with_options api = api_session . with_token ( SomeToken ( ... )) api = api_session . with_options ( APIOptions ( ... ))","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"api/#_1","text":"VKWave API \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f VKWave \u0432\u044b \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043d\u0435\u0439 \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u041e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d\u044b, \u0438\u0442\u0434.) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 VK's API \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"api/#_2","text":"\u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0441\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # our tokens. we got them from VK bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # tokens that are ready for using. bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens )","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438"},{"location":"api/#gettokenstrategy","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , AnyABCToken , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u0434\u043e\u0441\u0442\u0430\u0451\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e.","title":"GetTokenStrategy"},{"location":"api/#api","text":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API from vkwave.client import AIOHTTPClient api = API ( tokens = my_token , clients = AIOHTTPClient ()) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text ) \u041d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d, \u0441\u043b\u0435\u0434\u0443\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0441 \u0442\u0430\u043a\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c: friends = await api . friends . get () result = await api . messages . send ( ... ) \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0434\u0440\u0443\u0437\u044c\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d, \u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u043c. \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b. async with api . sync_token () as sapi : friends = await sapi . friends . get () ... \u0422\u0443\u0442 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c api_session.get_context() \u043d\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442. \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c api_session.with_token \u0438\u043b\u0438 api_session.with_options api = api_session . with_token ( SomeToken ( ... )) api = api_session . with_options ( APIOptions ( ... ))","title":"API"},{"location":"bots/","text":"Overview \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c VKWave \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0430\u0445","title":"Overview"},{"location":"bots/#overview","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c VKWave \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0430\u0445","title":"Overview"},{"location":"bots/easy/","text":"Easy bots \u00b6 \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 vkwave.bots \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() \u041f\u0443\u043b \u0442\u043e\u043a\u0435\u043d\u043e\u0432 from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () ClonesBot (\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u0438\u043c \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c \u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438, \u0431\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () \u0412\u0441\u0435 \u043a\u043b\u043e\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044f\u0442 \"Hello world!\" \u043d\u0430 \"hello\". \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SimpleLongPollBot , \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c - \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) simple_bot_message_handler \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u043e\u043c\u0438\u043c\u043e \u043d\u0435\u0433\u043e \u0435\u0449\u0435 \u0435\u0441\u0442\u044c: simple_bot_handler (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439), simple_user_handler (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432), simple_user_message_handler.","title":"Easy bots"},{"location":"bots/easy/#easy-bots","text":"\u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 vkwave.bots \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() \u041f\u0443\u043b \u0442\u043e\u043a\u0435\u043d\u043e\u0432 from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () ClonesBot (\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u0438\u043c \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c \u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438, \u0431\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () \u0412\u0441\u0435 \u043a\u043b\u043e\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044f\u0442 \"Hello world!\" \u043d\u0430 \"hello\". \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SimpleLongPollBot , \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c - \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) simple_bot_message_handler \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u043e\u043c\u0438\u043c\u043e \u043d\u0435\u0433\u043e \u0435\u0449\u0435 \u0435\u0441\u0442\u044c: simple_bot_handler (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439), simple_user_handler (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432), simple_user_message_handler.","title":"Easy bots"},{"location":"bots/filters/","text":"Filters \u00b6 \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0434\u043b\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432/\u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432. \u0412 VKWave \u043e\u043d\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 BaseFilter . \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043b\u044f\u043c\u0431\u0434\u0443/\u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e filter_caster . from vkwave.bots.core.dispatching.filters import filter_caster # here we are creating function that will create another function and cast it to filter # it's called `currying`. text = lambda text : filter_caster . cast ( lambda event : event . object . object . message . text . lower () == text ) \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0432\u0430\u043c \u0432\u0440\u044f\u0434 \u043b\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f filter_caster \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0437\u0430\u0434\u0430\u0447, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440 \u043e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. # `lambda event: 1` converted into `BaseFilter` r . new () . with_filters ( lambda event : 1 ) . handle ( ... ) . ready () # totally equal r . new () . with_filters ( filter_caster . cast ( lambda event : 1 ) . handle ( ... ) . ready ()) \u041d\u043e \u0437\u043d\u0430\u043d\u0438\u0435 \u043e \u0435\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e 3 \u043a\u0430\u0441\u0442\u0435\u0440\u0430 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u044b: \u043b\u044f\u043c\u0431\u0434\u044b, \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c. from typing import Optional from vkwave.bots.core.dispatching.filters.base import BaseFilter , FilterResult # \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 class TextFilter ( BaseFilter ): def __init__ ( self , text : str ): self . text = text async def check ( self , event : BaseEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text . lower () == self . text ) # \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a r . new () . with_filters ( TextFilter ( \"some pretty text\" )) # \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0430\u0441\u0442\u0435\u0440 \u0434\u043b\u044f \u043d\u0435\u0433\u043e def str_caster ( text : str ) -> Optional [ BaseFilter ]: if isinstance ( text , str ): return TextFilter ( text ) return None filter_caster . add_caster ( str_caster ) # \u0438... \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e! r . new () . with_filters ( \"some pretty text\" ) \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 BaseFilter - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u0435\u0449\u0438. from vkwave.bots.core.dispatching.filters import filter_caster text = lambda text : filter_caster . cast ( lambda event : event . object . object . message . text . lower () == text ) # ~text(\"hi\") \u043b\u044e\u0431\u043e\u0439 \u0442\u0435\u043a\u0441\u0442 \u043a\u0440\u043e\u043c\u0435 hi # \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u043d\u0438\u0435, \u0442\u0430\u043c \u0433\u0434\u0435 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 True, \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 ~ \u0432\u0435\u0440\u043d\u0435\u0442 False r . new () . with_filters ( ~ text ( \"hi\" )) # filter & filter \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 False \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0444\u0438\u043b\u044c\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 False r . new () . with_filters ( text ( \"hi\" ) & lambda event : ... ) # filter | filter \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043f\u0438\u0442\u043e\u043d\u043e\u0432\u0441\u043a\u043e\u0435 `or` r . new () . with_filters ( text ( \"hi\" ) | text ( \"hello\" )) # \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0438\u0445 r . new () . with_filters ( some_filter & ( text ( \"hi\" ) | text ( \"hello\" ) | ~ text ( \"bye\" )))","title":"Filters"},{"location":"bots/filters/#filters","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0434\u043b\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432/\u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432. \u0412 VKWave \u043e\u043d\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 BaseFilter . \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043b\u044f\u043c\u0431\u0434\u0443/\u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e filter_caster . from vkwave.bots.core.dispatching.filters import filter_caster # here we are creating function that will create another function and cast it to filter # it's called `currying`. text = lambda text : filter_caster . cast ( lambda event : event . object . object . message . text . lower () == text ) \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0432\u0430\u043c \u0432\u0440\u044f\u0434 \u043b\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f filter_caster \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0437\u0430\u0434\u0430\u0447, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440 \u043e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. # `lambda event: 1` converted into `BaseFilter` r . new () . with_filters ( lambda event : 1 ) . handle ( ... ) . ready () # totally equal r . new () . with_filters ( filter_caster . cast ( lambda event : 1 ) . handle ( ... ) . ready ()) \u041d\u043e \u0437\u043d\u0430\u043d\u0438\u0435 \u043e \u0435\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e 3 \u043a\u0430\u0441\u0442\u0435\u0440\u0430 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u044b: \u043b\u044f\u043c\u0431\u0434\u044b, \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c. from typing import Optional from vkwave.bots.core.dispatching.filters.base import BaseFilter , FilterResult # \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 class TextFilter ( BaseFilter ): def __init__ ( self , text : str ): self . text = text async def check ( self , event : BaseEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text . lower () == self . text ) # \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a r . new () . with_filters ( TextFilter ( \"some pretty text\" )) # \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0430\u0441\u0442\u0435\u0440 \u0434\u043b\u044f \u043d\u0435\u0433\u043e def str_caster ( text : str ) -> Optional [ BaseFilter ]: if isinstance ( text , str ): return TextFilter ( text ) return None filter_caster . add_caster ( str_caster ) # \u0438... \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e! r . new () . with_filters ( \"some pretty text\" ) \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 BaseFilter - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u0435\u0449\u0438. from vkwave.bots.core.dispatching.filters import filter_caster text = lambda text : filter_caster . cast ( lambda event : event . object . object . message . text . lower () == text ) # ~text(\"hi\") \u043b\u044e\u0431\u043e\u0439 \u0442\u0435\u043a\u0441\u0442 \u043a\u0440\u043e\u043c\u0435 hi # \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u043d\u0438\u0435, \u0442\u0430\u043c \u0433\u0434\u0435 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 True, \u0444\u0438\u043b\u044c\u0442\u0440 \u0441 ~ \u0432\u0435\u0440\u043d\u0435\u0442 False r . new () . with_filters ( ~ text ( \"hi\" )) # filter & filter \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 False \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0444\u0438\u043b\u044c\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 False r . new () . with_filters ( text ( \"hi\" ) & lambda event : ... ) # filter | filter \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043f\u0438\u0442\u043e\u043d\u043e\u0432\u0441\u043a\u043e\u0435 `or` r . new () . with_filters ( text ( \"hi\" ) | text ( \"hello\" )) # \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0438\u0445 r . new () . with_filters ( some_filter & ( text ( \"hi\" ) | text ( \"hello\" ) | ~ text ( \"bye\" )))","title":"Filters"},{"location":"bots/fsm/","text":"FSM \u00b6 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442 Finite-state machine \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. FSM \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0447\u0430\u0442\u0430\u0445 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435, \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c for_what \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 fsm. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 - ForWhat.FOR_USER \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_CHAT \u0414\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_USER_IN_CHAT \u0427\u0442\u043e\u0431\u044b \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b \u0431\u0435\u0437 StateFilter \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u043e\u0441\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043e\u043f\u0440\u043e\u0441\u0430 (\u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0435\u0439\u0442 `state=ANY_STATE`) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u044e\u0437\u0435\u0440 \u0432 \u0431\u0430\u0437\u0435 if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u043f\u0440\u043e\u0441 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044e\u0437\u0435\u0440\u0430 # `fsm.finish` \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" \u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u0435\u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435\u0435: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"bots/fsm/#fsm","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442 Finite-state machine \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. FSM \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0447\u0430\u0442\u0430\u0445 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435, \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c for_what \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 fsm. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 - ForWhat.FOR_USER \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_CHAT \u0414\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_USER_IN_CHAT \u0427\u0442\u043e\u0431\u044b \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b \u0431\u0435\u0437 StateFilter \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u043e\u0441\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043e\u043f\u0440\u043e\u0441\u0430 (\u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0435\u0439\u0442 `state=ANY_STATE`) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u044e\u0437\u0435\u0440 \u0432 \u0431\u0430\u0437\u0435 if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u043f\u0440\u043e\u0441 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044e\u0437\u0435\u0440\u0430 # `fsm.finish` \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" \u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u0435\u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435\u0435: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"bots/routers/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u00b6 \u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438. \u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c \u00b6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router ) \u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440.","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"bots/routers/#_1","text":"\u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438.","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"bots/routers/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router ) \u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440.","title":"\u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c"},{"location":"bots/storage/","text":"Storage \u00b6 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u043e\u0442\u0430. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449: - dict-like \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - ttl \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b time-to-life \u043a\u043b\u044e\u0447\u0438: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"bots/storage/#storage","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u043e\u0442\u0430. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449: - dict-like \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - ttl \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b time-to-life \u043a\u043b\u044e\u0447\u0438: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"bots/usage/","text":"Usage \u00b6 \u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"bots/usage/#usage","text":"\u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"bots/utils/","text":"Overview \u00b6 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0449\u0438 \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0438 \u0442.\u0434.","title":"Overview"},{"location":"bots/utils/#overview","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0449\u0438 \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0438 \u0442.\u0434.","title":"Overview"},{"location":"bots/utils/keyboard/","text":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u00b6 \u041f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots.utils.keyboards import Keyboard from vkwave.bots.utils.keyboards.keyboard import ButtonColor kb = Keyboard ( one_time = False ) kb . add_text_button ( \"hello\" ) kb . add_row () kb . add_text_button ( \"red hello\" , color = ButtonColor . NEGATIVE ) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c: api . messages . send ( user_id = 1 , random_id = 0 , keyboard = kb . get_keyboard ())","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"bots/utils/keyboard/#_1","text":"\u041f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots.utils.keyboards import Keyboard from vkwave.bots.utils.keyboards.keyboard import ButtonColor kb = Keyboard ( one_time = False ) kb . add_text_button ( \"hello\" ) kb . add_row () kb . add_text_button ( \"red hello\" , color = ButtonColor . NEGATIVE ) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c: api . messages . send ( user_id = 1 , random_id = 0 , keyboard = kb . get_keyboard ())","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"bots/utils/templates/","text":"Templates \u00b6 \u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 ) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c \u043a\u0430\u043a template : api . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"Templates"},{"location":"bots/utils/templates/#templates","text":"\u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 ) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c \u043a\u0430\u043a template : api . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"Templates"},{"location":"bots/utils/uploaders/","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u00b6 \u041f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438/\u0430\u0443\u0434\u0438\u043e/\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043d\u0430 \u0441\u0442\u0435\u043d\u0443. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 from vkwave.bots import PhotoUploader api = API ( clients = client , tokens = token ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo.jpg\" , \"photo.jpg\" , \"photo.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 big_attachment = await uploader . get_attachments_from_links ( peer_id = 578716413 , links = [ \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , ], ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0443\u0434\u0438\u043e from vkwave.bots.utils.uploaders import VoiceUploader uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0441\u0442\u0435\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 /examples","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438"},{"location":"bots/utils/uploaders/#_1","text":"\u041f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438/\u0430\u0443\u0434\u0438\u043e/\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043d\u0430 \u0441\u0442\u0435\u043d\u0443. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 from vkwave.bots import PhotoUploader api = API ( clients = client , tokens = token ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo.jpg\" , \"photo.jpg\" , \"photo.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 big_attachment = await uploader . get_attachments_from_links ( peer_id = 578716413 , links = [ \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , \"https://user-images.githubusercontent.com/28061158/75329873-7f738200-5891-11ea-9565-fd117ea4fc9e.jpg\" , ], ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0443\u0434\u0438\u043e from vkwave.bots.utils.uploaders import VoiceUploader uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 ) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0441\u0442\u0435\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 /examples","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438"},{"location":"client/","text":"Overview \u00b6 \u0421\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c VKWave.","title":"Overview"},{"location":"client/#overview","text":"\u0421\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c VKWave.","title":"Overview"},{"location":"client/context/","text":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u00b6 \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 client.create_request \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435 send_request ) \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u0445. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u00b6 \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u041e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 RequestContext \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. \u041e\u0434\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0445\u0435\u043d\u0434\u043b\u0435\u0440. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0430 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430 await ctx . send_request () # \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 TimeoutException, \u043e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data ) \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430.","title":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"},{"location":"client/context/#_1","text":"\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 client.create_request \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435 send_request ) \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u0445.","title":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"},{"location":"client/context/#_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u041e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 RequestContext \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. \u041e\u0434\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0445\u0435\u043d\u0434\u043b\u0435\u0440. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0430 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430 await ctx . send_request () # \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 TimeoutException, \u043e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data ) \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430.","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f"},{"location":"client/custom/","text":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u00b6 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 VKWave \u0434\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u043e\u043d\u0435\u0447\u043d\u043e \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0444\u0438\u0448\u043a\u0438, \u043d\u043e VKWave \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0440 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0414\u043b\u044f \u0447\u0435\u0433\u043e? \u00b6 \u041f\u043e\u043a\u0430 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443 \u043d\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. \u041b\u0438\u043c\u0438\u0442\u044b \u0432 API, \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u044c, \u043f\u0443\u0442\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0430. VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c low-level \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0418 \u0434\u0430, VKWave \u0434\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u043c \u043f\u0443\u0442\u0435\u043c, \u0432\u0430\u0448 \u043a\u043e\u0434 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f high-level . \u041f\u0440\u0438\u043c\u0435\u0440 \u00b6 \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u044f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. Note : \u0422\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) \u0414\u0440\u0443\u0433\u0438\u0435 \u0447\u0430\u0441\u0442\u0438 vkwave core \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c http \u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442.","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b"},{"location":"client/custom/#_1","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 VKWave \u0434\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u043e\u043d\u0435\u0447\u043d\u043e \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0444\u0438\u0448\u043a\u0438, \u043d\u043e VKWave \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0440 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b"},{"location":"client/custom/#_2","text":"\u041f\u043e\u043a\u0430 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443 \u043d\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. \u041b\u0438\u043c\u0438\u0442\u044b \u0432 API, \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u044c, \u043f\u0443\u0442\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0430. VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c low-level \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0418 \u0434\u0430, VKWave \u0434\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u043c \u043f\u0443\u0442\u0435\u043c, \u0432\u0430\u0448 \u043a\u043e\u0434 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f high-level .","title":"\u0414\u043b\u044f \u0447\u0435\u0433\u043e?"},{"location":"client/custom/#_3","text":"\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u044f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. Note : \u0422\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) \u0414\u0440\u0443\u0433\u0438\u0435 \u0447\u0430\u0441\u0442\u0438 vkwave core \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c http \u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442.","title":"\u041f\u0440\u0438\u043c\u0435\u0440"},{"location":"client/using/","text":"Using \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u041d\u043e \u0447\u0442\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f VKWave. How to \u00b6 \u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"Using"},{"location":"client/using/#using","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u041d\u043e \u0447\u0442\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f VKWave.","title":"Using"},{"location":"client/using/#how-to","text":"\u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"How to"},{"location":"http/","text":"TODO \u00b6","title":"TODO"},{"location":"http/#todo","text":"","title":"TODO"},{"location":"longpoll/","text":"TODO \u00b6","title":"TODO"},{"location":"longpoll/#todo","text":"","title":"TODO"},{"location":"types/","text":"\u041e\u0431\u0437\u043e\u0440 \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 pydantic \u0442\u0438\u043f\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 vk-schema. Usage \u00b6 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a vk api \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text ) \u0427\u0442\u043e \u0432\u0430\u0436\u043d\u0435\u0435, vkwave.types \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0412\u0421\u0415 \u0447\u0430\u0441\u0442\u0438 vk-schema \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"types/#_1","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 pydantic \u0442\u0438\u043f\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 vk-schema.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"types/#usage","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a vk api \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text ) \u0427\u0442\u043e \u0432\u0430\u0436\u043d\u0435\u0435, vkwave.types \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0412\u0421\u0415 \u0447\u0430\u0441\u0442\u0438 vk-schema \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.","title":"Usage"}]}